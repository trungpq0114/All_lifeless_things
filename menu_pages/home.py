import streamlit as st
from page_setup import *
import pandas as pd
import plotly.graph_objects as go
from streamlit_echarts import st_echarts
from functions.dataset import get_commit_activity, get_airflow_stats, get_airflow_dagrun

def show_home():
    st.set_page_config(layout='wide')
    # Layout hai c·ªôt ch√≠nh cho to√†n b·ªô n·ªôi dung b√™n d∆∞·ªõi heatmap
    col_left, col_right = st.columns([3, 1])
    with col_left:
        # Th√¥ng tin c√° nh√¢n
        with st.container():
            col1, col2 = st.columns([1, 3])
            with col1:
                st.image('https://avatars.githubusercontent.com/u/84620703?s=400&u=1e3fc050834b12d4cbf23908b107d9ed4232c5d5&v=4', width=250)
            with col2:
                st.markdown("""
                <h1 style='margin-bottom:0;'>Ph·∫°m Quang Trung</h1>
                <h4 style='margin-top:0;color:gray;'>Data Analyst</h4>
                <p>üìç H√† N·ªôi, Vi·ªát Nam  <br>
                üìß trungpq.0114@gmail.com  <br>
                ‚òéÔ∏è 0123 456 789  <br>
                <a href='https://www.linkedin.com/in/trungpham0114/'>LinkedIn</a> | <a href='https://github.com/trungpq0114'>GitHub</a></p>
                """, unsafe_allow_html=True)
    with col_right:
        st.markdown("## üõ†Ô∏è K·ªπ nƒÉng ch√≠nh")
        st.markdown("""
        - Excel, GG sheet, SQL
        - Python, Mysql, ETL
        - Data Visualization
        - Business Analysis
        - AI Agent
        - Datamart
        """)
        st.markdown("---")
        st.markdown("## üéì H·ªçc v·∫•n")
        st.markdown("""
        **ƒê·∫°i h·ªçc Ngo·∫°i th∆∞∆°ng**  <br>
        Khoa Kinh t·∫ø Qu·ªëc t·∫ø  <br>
        X·∫øp lo·∫°i: B·∫±ng gi·ªèi
        """, unsafe_allow_html=True)
        st.markdown("---")
        st.markdown("## üåê Ng√¥n ng·ªØ")
        st.markdown("""
        **Ti·∫øng Anh**  <br>
        TOEIC 690
        """, unsafe_allow_html=True)
        st.markdown("---")
        st.markdown("## üéØ S·ªü th√≠ch")
        hobbies = [
            ("üìö", "ƒê·ªçc s√°ch"),
            ("üèÉ", "Ch·∫°y b·ªô"),
            ("üåè", "Du l·ªãch"),
            ("üì∑", "Ch·ª•p ·∫£nh")
        ]
        cols = st.columns(2)
        for idx, (icon, hobby) in enumerate(hobbies):
            with cols[idx % 2]:
                st.markdown(
                    f"""
                    <div style='display:flex; align-items:center; margin-bottom:12px;'>
                        <span style='font-size:32px; margin-right:10px;'>{icon}</span>
                        <span style='font-size:18px;'>{hobby}</span>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
    with col_left:
        st.markdown("---")
        df = get_commit_activity()
        # Ch·ªâ l·∫•y c√°c repo c√≥ √≠t nh·∫•t 1 commit
        repo_commit = df.groupby('repo_name')['total'].sum()
        valid_repos = repo_commit[repo_commit > 0].index.tolist()
        repo_options = ['T·∫•t c·∫£'] + valid_repos
        repo_descriptions = {
            "T·∫•t c·∫£": "√çt qu√° :D m√† m√¨nh ch∆∞a hi·ªÉu ƒë∆∞·ª£c sao API Github tr·∫£ v·ªÅ √≠t v·∫≠y. Nh∆∞ng tr√™n h·∫øt, m·ªùi b·∫°n ƒë·∫øn v·ªõi Portfolio c·ªßa m√¨nh!",
            "All_lifeless_things": "Ch√≠nh l√† d·ª± √°n t·∫°o ra trang web n√†y, n∆°i m√¨nh l∆∞u tr·ªØ c√°c d·ª± √°n v√† th√¥ng tin c√° nh√¢n."
            "b·∫°n c√≥ th·ªÉ xem m√£ ngu·ªìn t·∫°i <a href='https://github.com/trungpq0114/All_lifeless_things'>ƒë√¢y</a>.",
            "repo2": "M√¥ t·∫£ repo 2",
            # Th√™m c√°c repo kh√°c ·ªü ƒë√¢y
        }

        col_repo, col_main = st.columns([2, 10])
        with col_repo:
            repo = st.selectbox("Repositories", repo_options)
            st.markdown(repo_descriptions.get(repo, "Kh√¥ng c√≥ m√¥ t·∫£ cho repo n√†y."), unsafe_allow_html=True)
        if repo == 'T·∫•t c·∫£':
            df_repo = df[df['repo_name'].isin(valid_repos)].copy()
        else:
            df_repo = df[df['repo_name'] == repo].copy()
        df_repo['week_dt'] = pd.to_datetime(df_repo['week'], unit='s')
        df_repo['week_label'] = df_repo['week_dt'].dt.strftime('%Y-%U')
        days = ['day_0', 'day_1', 'day_2', 'day_3', 'day_4', 'day_5', 'day_6']
        week_day = df_repo.groupby('week_label')[days].sum().T
        week_day.index = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
        # T·∫°o text cho tooltip
        text = []
        for i, day in enumerate(week_day.index):
            row = []
            for j, week in enumerate(week_day.columns):
                row.append(f"Tu·∫ßn: {week}<br>Ng√†y: {day}<br>Commits: {week_day.iloc[i, j]}")
            text.append(row)
        # Chu·∫©n b·ªã d·ªØ li·ªáu cho ECharts heatmap
        x_labels = list(week_day.columns)
        y_labels = list(week_day.index)
        data = []
        for y_idx, y in enumerate(y_labels):
            for x_idx, x in enumerate(x_labels):
                value = int(week_day.loc[y, x])  # ƒê·∫£m b·∫£o l√† int
                data.append([x_idx, y_idx, value])
        # T√≠nh to√°n chi·ªÅu cao ph√π h·ª£p ƒë·ªÉ √¥ g·∫ßn vu√¥ng
        cell_size = 20  # px, b·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
        chart_height = max(160, cell_size * len(y_labels))
        option = {
            "tooltip": {
                "position": 'top'
            },
            "grid": {"show": True, "bottom": '12%',"top": '10%', "left": '10%', "right": '1%', "containLabel": False, "borderWidth": 5},
            "xAxis": {
                "type": 'category',
                "data": x_labels,
                "splitArea": {"show": True}
            },
            "yAxis": {
                "type": 'category',
                "data": y_labels,
                "splitArea": {"show": True}
            },
            "visualMap": {
                "show": False,
                "min": int(week_day.values.min()),
                "max": int(week_day.values.max()),
                "calculable": True,
                "color": ["#232877", "#2A3C96", "#364DAA", "#6786E9", '#F1F5FF']
            },
            "series": [{
                "name": 'Commits',
                "type": 'heatmap',
                "data": data,
                "label": {"show": False},
                "emphasis": {"itemStyle": {"shadowBlur": 10, "shadowColor": 'rgba(0, 0, 0, 0.5)'}},
                "itemStyle": {
                    "borderColor": "#333",
                    "borderWidth": 2
                }
            }]
        }
        with col_main:
            st_echarts(option, height=f"{chart_height}px")

        st.markdown("---")
        # Kinh nghi·ªám l√†m vi·ªác
        with st.expander("üíº Kinh nghi·ªám l√†m vi·ªác", expanded=True):
            st.markdown("""
            <div style='margin-bottom:16px;'>
            <b>Team Lead</b> <br>
            GHTK <br>
            <span style='color:gray;'>Feb 2025 - Present ¬∑ 6 th√°ng | H√† N·ªôi</span>
            </div>
            <div style='margin-bottom:16px;'>
            <b>Data Analyst</b> <br>
            GHTK <br>
            <span style='color:gray;'>Dec 2022 - Present ¬∑ 2 nƒÉm 8 th√°ng | H√† N·ªôi</span>
            </div>
            <div style='margin-bottom:16px;'>
            <b>Business Analyst</b> <br>
            Viet Culture Media Corporation <br>
            <span style='color:gray;'>Nov 2021 - Aug 2022 ¬∑ 10 th√°ng | H√† N·ªôi (On-site)</span>
            </div>
            """, unsafe_allow_html=True)
        st.markdown("---")
        # D·ª± √°n ti√™u bi·ªÉu
        with st.container():
            st.markdown("## üöÄ D·ª± √°n ti√™u bi·ªÉu")
            st.markdown("""
            <div style='border:1px solid #eee; border-radius:8px; padding:16px; margin-bottom:16px;'>
            <h4>H·ªá th·ªëng dashboard cho c√¥ng ty Ecom</h4>
            <ul>
            <li><b>M√¥ t·∫£:</b> X√¢y d·ª±ng h·ªá th·ªëng Dashboard doanh thu, chi ph√≠, t·ªìn kho cho c√¥ng ty v·ªõi c√°c t√≠nh nƒÉng c∆° b·∫£n g·ªìm ph√¢n quy·ªÅn theo t√†i kho·∫£n, chi nh√°nh, team.</li>
            <li><b>C√¥ng ngh·ªá:</b> Python, Pandas, SQL, Streamlit</li>
            <li><b>K·∫øt qu·∫£:</b> H·ªó tr·ª£ team MKT ra quy·∫øt ƒë·ªãnh nhanh h∆°n, s·ªë li·ªáu ch√≠nh x√°c h∆°n, gi·∫£m b·ªõt ƒë∆∞·ª£c 80% nh√¢n vi√™n k·∫ø to√°n t·ªïng h·ª£p v·ªõi chi ph√≠ v·∫≠n h√†nh th·∫•p.</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)
            # H·ªá th·ªëng ETL + th·ªëng k√™ Airflow 7 ng√†y g·∫ßn nh·∫•t
            st.markdown("""
            <div style='border:1px solid #eee; border-radius:8px; padding:16px; margin-bottom:16px;'>
            <h4>H·ªá th·ªëng ETL</h4>
            <ul>
            <li><b>M√¥ t·∫£:</b> H·ªá th·ªëng ETL ƒë·ªìng b·ªô ƒë∆°n h√†ng t·ª± c√°c n·ªÅn t·∫£ng POS Pancake, Facebook Ads, Tiktok Ads.</li>
            <li><b>C√¥ng ngh·ªá:</b> Python, Airflow, DBT, Mysql</li>
            <li><b>K·∫øt qu·∫£:</b> T·ª± ƒë·ªông h√≥a 100% c√°c c√¥ng vi·ªác ƒë·ªìng b·ªô ƒë∆°n h√†ng. C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh·∫•t m·ªói 5 ph√∫t.</li>
            </ul>
            <div style='margin-top:16px;'><b>Th·ªëng k√™ Airflow 7 ng√†y g·∫ßn nh·∫•t:</b></div>
            """, unsafe_allow_html=True)
            stats = get_airflow_stats()
            c1, c2, c3, c4 = st.columns(4)
            c1.metric("S·ªë DAG ƒë√£ ch·∫°y", f"{stats['num_dags']}")
            c2.metric("S·ªë DAG run", f"{stats['num_runs']}")
            c3.metric("S·ªë l∆∞·ª£ng DAG l·ªói", f"{stats['num_failed']}")
            avg_min = round(stats['avg_duration']/60, 2) if stats['avg_duration'] else 0
            c4.metric("Th·ªùi gian ch·∫°y 1 DAG TB", f"{avg_min} ph√∫t")
            df_dag = get_airflow_dagrun()
            dag_median = df_dag.groupby('dag_id')['duration'].median().sort_values(ascending=True)
            fig = go.Figure(go.Bar(
                y=dag_median.index,
                x=dag_median.values / 60,  # chuy·ªÉn sang ph√∫t
                orientation='h',
                marker_color='#636EFA',
                text=[f"{v/60:.2f}" for v in dag_median.values],
                textposition='outside',
            ))
            fig.update_layout(
                yaxis_title='DAG',
                xaxis_title='',
                xaxis=dict(showticklabels=False, visible=False),
                height=350,
                margin=dict(l=10, r=10, t=10, b=10),  # gi·∫£m margin-top
            )
            fig.update_traces(textfont_size=12, textangle=0, cliponaxis=False)
            fig.update_yaxes(tickfont_size=12, title_font_size=14)
            fig.update_xaxes(tickfont_size=12, title_font_size=14)
            max_len = dag_median.index.str.len().max()
            st.markdown(f"""
                <div style='margin-bottom:5px; margin-left: {max_len*8}px; margin-top:0;'>
                    <span style='font-size:26px; font-weight:700; color:#636EFA;'>Trung v·ªã <b>th·ªùi gian ch·∫°y c·ªßa DAG</b></span>
                </div>
                <div style='margin-bottom:0px; margin-left: {max_len*8}px; margin-top:-8px;'>
                    <span style='font-size:16px; color:#ffffff;'>tr√™n Airflow trong 7 ng√†y qua. (ph√∫t)</span>
                </div>
            """, unsafe_allow_html=True)
            st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})
            st.markdown("""
            </div>
            """, unsafe_allow_html=True)
            st.markdown("""
            <div style='border:1px solid #eee; border-radius:8px; padding:16px; margin-bottom:16px;'>
            <h4>Webapp c√° nh√¢n h√≥a</h4>
            <ul>
            <li><b>M√¥ t·∫£:</b> Blog c√° nh√¢n deploy tr√™n Server c√° nh√¢n, theo d√µi k·∫øt qu·∫£ c√¥ng vi·ªác.</li>
            <li><b>C√¥ng ngh·ªá:</b> Python, Service, Ngrok</li>
            <li><b>K·∫øt qu·∫£:</b> L∆∞u profile c√° nh√¢n v√† theo d√µi c√°c dashboard c√° nh√¢n (Github, s·ªë l∆∞·ª£ng DAG, ...).</li>
            </ul>
            </div>
            """, unsafe_allow_html=True)